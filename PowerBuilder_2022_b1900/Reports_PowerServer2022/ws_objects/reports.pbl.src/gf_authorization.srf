$PBExportHeader$gf_authorization.srf
global type gf_authorization from function_object
end type

forward prototypes
global function integer gf_authorization ()
end prototypes

global function integer gf_authorization ();//Integer f_Authorization() for password
//UserName & Password are passed from the login window
RestClient lrc_Client
String  ls_url, ls_UserName, ls_UserPass, ls_PostData, ls_Response, ls_expires_in
String  ls_TokenType, ls_AccessToken
String  ls_type, ls_description, ls_uri, ls_state
Integer li_Return, li_rtn
JsonParser ljson_Parser
n_cst_security_ext ln_Seg

li_rtn = -1
ls_url = profilestring("CloudSetting.ini","setup","TokenURL","")

//login window can be implemented to return username & password according to actual needs.
//Open(w_login) 
//Return UserName & Password

ls_UserName = ProfileString("CloudSetting.ini", "users", "userName", "")
ls_UserPass = ProfileString("CloudSetting.ini", "users", "userPass", "")

ln_Seg = Create n_cst_security_ext
ls_UserPass = ln_Seg.of_Decrypt(ls_UserPass)
Destroy ln_Seg

IF IsNull(ls_UserName) OR Len(ls_UserName) = 0 THEN
	messagebox( "Atención", "Usuario del Token Vacio!" , Exclamation!)
	RETURN li_rtn
END IF

IF IsNull (ls_UserPass) OR Len(ls_UserPass) = 0 THEN
	messagebox( "Atención", "Password del Token Vacio!"  , Exclamation!)
	RETURN li_rtn
END IF

ls_PostData = '{"Username":"' + ls_UserName + '", "Password":"' + ls_UserPass + '"}'
lrc_Client = CREATE RestClient
lrc_Client.SetRequestHeader("Content-Type","application/json")
li_Return = lrc_Client.GetJWTToken( ls_Url, ls_PostData, ls_Response )

IF li_Return = 1 AND Pos(ls_Response, "access_token") > 0 THEN
	 ljson_Parser = CREATE JsonParser
	 ljson_Parser.LoadString(ls_Response)
	 ls_TokenType = ljson_Parser.GetItemString("/token_type")
	 ls_AccessToken = ljson_Parser.GetItemString("/access_token")
	 
	 //Application Set Authorization Header
	 Getapplication().SetHttpRequesTheader("Authorization", ls_TokenType + " " +ls_AccessToken, TRUE)
	 
	 //Set Global Variables
	 gl_Expiresin = Long (ljson_Parser.GetItemNumber("/expires_in"))
	
	 li_rtn = 1
ELSE
	IF li_Return = 1 THEN
		messagebox( "AccessToken Falied", "¡ Check TokenURL key in the Setup section of CloudSetting.ini file !" , Exclamation!)
	ELSE	
		messagebox( "AccessToken Falied", "Return :" + String ( li_Return ) ,StopSign!)
	END IF	
END IF

IF IsValid ( ljson_Parser ) THEN DESTROY ( ljson_Parser )
IF IsValid ( lrc_Client ) THEN DESTROY ( lrc_Client )

RETURN li_rtn
end function

